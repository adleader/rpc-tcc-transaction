<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!-- 事务序列化工具 -->
    <bean id="hessianSeralizer" class="com.chenhaiyang.tcc.transaction.core.serializer.hessian.HessianSerializer"/>

    <!-- TCC 业务活动日志（事务日志）的jdbc数据源 -->
    <bean id="tccDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="clone">
        <!-- 基本属性driverClassName、 url、user、password -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/tcc-transaction?useUnicode=true" />
        <property name="username" value="root" />
        <property name="password" value="root" />

        <!-- 配置初始化大小、最小、最大 -->
        <!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
        <!-- 初始化时建立物理连接的个数，缺省值为0 -->
        <property name="initialSize" value="5" />
        <!-- 最小连接池数量 -->
        <property name="minIdle" value="10" />
        <!-- 最大连接池数量，缺省值为8 -->
        <property name="maxActive" value="20" />

        <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
        <property name="maxWait" value="1000" />
    </bean>

    <!-- 事务持久化介质,自选,这里以jdbc为例 -->
    <bean id="transactionStorage" class="com.chenhaiyang.tcc.transaction.core.storage.jdbc.JdbcTransactionStorage">
        <!-- 序列化方式 -->
        <constructor-arg ref="hessianSeralizer"/>
        <!-- jdbc数据源 -->
        <property name="dataSource" ref="tccDataSource"/>
        <!-- 数据库表名后缀 -->
        <property name="tbSuffix" value="_root"/>
    </bean>

    <!-- 事务持久化介质，自选，这里以redis为例 -->
    <!--<bean id="jedisPool" class="redis.clients.jedis.JedisPool">-->
        <!--<constructor-arg value="127.0.0.1"/>-->
        <!--<constructor-arg value="6379"/>-->
    <!--</bean>-->
    <!--<bean id="transactionStorage" class="com.chenhaiyang.tcc.transaction.core.storage.redis.RedisTransactionStorage">-->
        <!--&lt;!&ndash; 序列化方式 &ndash;&gt;-->
        <!--<constructor-arg ref="hessianSeralizer"/>-->
        <!--&lt;!&ndash; 分布式锁超时时间（upadate原子性使用分布式锁实现） &ndash;&gt;-->
        <!--<property name="lockTimeout" value="2000"/>-->
        <!--&lt;!&ndash; jedis pool &ndash;&gt;-->
        <!--<property name="jedisPool" ref="jedisPool"/>-->
    <!--</bean>-->


    <!--事务持久化介质，自选，这里以zookeeper为例 -->
    <!--<bean id="transactionStorage" class="com.chenhaiyang.tcc.transaction.core.storage.zookeeper.ZookeeperTransactionStorage">-->
        <!--&lt;!&ndash; 序列化方式 &ndash;&gt;-->
        <!--<constructor-arg ref="hessianSeralizer"/>-->
        <!--&lt;!&ndash; zookeeper连接地址 &ndash;&gt;-->
        <!--<constructor-arg value="127.0.0.1:2181"/>-->
    <!--</bean>-->
</beans>